package com.blocker.wrapper;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class CrowdFunding extends Contract {
    public static final String BINARY = "0x6080604052600061001d6100c0640100000000026401000000009004565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100c8565b600033905090565b613016806100d76000396000f3fe6080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806324dcb72f146100e05780632b56489814610109578063532a748e1461014b578063801da98e146101885780638da5cb5b146101b1578063920fb159146101dc57806393fa5ec614610205578063a55d56a81461022e578063af526b2f1461026b578063ba64f8a314610294578063cc075e09146102d1578063edf4a583146102fa578063f102a67c14610339578063f8b2cb4f14610362578063ffdd5cf11461039f575b600080fd5b3480156100ec57600080fd5b506101076004803603610102919081019061278a565b6103df565b005b34801561011557600080fd5b50610130600480360361012b91908101906128d7565b6105cf565b60405161014296959493929190612d04565b60405180910390f35b34801561015757600080fd5b50610172600480360361016d9190810190612896565b610781565b60405161017f9190612dcc565b60405180910390f35b34801561019457600080fd5b506101af60048036036101aa91908101906127de565b6107fc565b005b3480156101bd57600080fd5b506101c6610a86565b6040516101d39190612c29565b60405180910390f35b3480156101e857600080fd5b5061020360048036036101fe9190810190612a6a565b610aaf565b005b34801561021157600080fd5b5061022c6004803603610227919081019061270f565b610c55565b005b34801561023a57600080fd5b5061025560048036036102509190810190612a16565b6111d7565b6040516102629190612ce2565b60405180910390f35b34801561027757600080fd5b50610292600480360361028d919081019061278a565b6112ff565b005b3480156102a057600080fd5b506102bb60048036036102b69190810190612896565b61157d565b6040516102c89190612dcc565b60405180910390f35b3480156102dd57600080fd5b506102f860048036036102f39190810190612997565b6115f5565b005b34801561030657600080fd5b50610321600480360361031c919081019061292b565b611952565b60405161033093929190612de7565b60405180910390f35b34801561034557600080fd5b50610360600480360361035b9190810190612a16565b611a4b565b005b34801561036e57600080fd5b50610389600480360361038491908101906126e6565b612009565b6040516103969190612dcc565b60405180910390f35b3480156103ab57600080fd5b506103c660048036036103c191908101906126e6565b6120b7565b6040516103d69493929190612e1e565b60405180910390f35b60006005826040518082805190602001908083835b60208310151561041957805182526020820191506020810190506020830392506103f4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506001600581111561045b57fe5b8160060160009054906101000a900460ff16600581111561047857fe5b14151561048457600080fd5b806003015481600201541115151561049b57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600301546040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161051a929190612cb9565b602060405180830381600087803b15801561053457600080fd5b505af1158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061056c919081019061286d565b5060028160060160006101000a81548160ff0219169083600581111561058e57fe5b02179055507f1f747251ecd96060609f566d19c5e17f3ee0a54d4341d90141a6797579fa96e2826040516105c29190612ce2565b60405180910390a1505050565b60606000806000806000806005896040518082805190602001908083835b60208310151561061257805182526020820191506020810190506020830392506105ed565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050806000018160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826002015483600301548460040160008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548560060160009054906101000a900460ff16858054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107635780601f1061073857610100808354040283529160200191610763565b820191906000526020600020905b81548152906001019060200180831161074657829003601f168201915b50505050509550965096509650965096509650509295509295509295565b60006005826040518082805190602001908083835b6020831015156107bb5780518252602082019150602081019050602083039250610796565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501805490509050919050565b60006005856040518082805190602001908083835b6020831015156108365780518252602082019150602081019050602083039250610811565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506004600581111561087857fe5b8160060160009054906101000a900460ff16600581111561089557fe5b1415156108a157600080fd5b8373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561090057600080fd5b828160090160008282540192505081905550600083830290508673ffffffffffffffffffffffffffffffffffffffff16633b66aad18630846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161097293929190612c82565b602060405180830381600087803b15801561098c57600080fd5b505af11580156109a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109c4919081019061286d565b508673ffffffffffffffffffffffffffffffffffffffff166323b872dd8630846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a1e93929190612c82565b602060405180830381600087803b158015610a3857600080fd5b505af1158015610a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a70919081019061286d565b50610a7d878786866121cc565b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006005846040518082805190602001908083835b602083101515610ae95780518252602082019150602081019050602083039250610ac4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060026005811115610b2b57fe5b8160060160009054906101000a900460ff166005811115610b4857fe5b141515610b5457600080fd5b6000816009018190555060048160060160006101000a81548160ff02191690836005811115610b7f57fe5b021790555082816008018190555081816007019080519060200190610ba592919061259b565b506001600360008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fd0345c60aa523ca74849e7d52af95b50033744469eb1e1c230f1958ec6346bc884604051610c479190612ce2565b60405180910390a150505050565b60006005836040518082805190602001908083835b602083101515610c8f5780518252602082019150602081019050602083039250610c6a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610d07612593565b73ffffffffffffffffffffffffffffffffffffffff1614151515610d60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5790612dac565b60405180910390fd5b60016005811115610d6d57fe5b8160060160009054906101000a900460ff166005811115610d8a57fe5b141515610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390612d8c565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16633b66aad18530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e2593929190612c82565b602060405180830381600087803b158015610e3f57600080fd5b505af1158015610e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e77919081019061286d565b508473ffffffffffffffffffffffffffffffffffffffff166323b872dd8530856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ed193929190612c82565b602060405180830381600087803b158015610eeb57600080fd5b505af1158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f23919081019061286d565b506005836040518082805190602001908083835b602083101515610f5c5780518252602082019150602081019050602083039250610f37565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501610f9a612593565b90806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050816005846040518082805190602001908083835b6020831015156110365780518252602082019150602081019050602083039250611011565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060030160008282540192505081905550816005846040518082805190602001908083835b6020831015156110b2578051825260208201915060208101905060208303925061108d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040160006110f2612593565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550600160026000611147612593565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc01ee4a877a9698da7c64514cb5fcb9c1e110a3be7ac3f0fd717d83a9ae95b636111b7612593565b84846040516111c893929190612c44565b60405180910390a15050505050565b60606005836040518082805190602001908083835b60208310151561121157805182526020820191506020810190506020830392506111ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600d018281548110151561125457fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112f25780601f106112c7576101008083540402835291602001916112f2565b820191906000526020600020905b8154815290600101906020018083116112d557829003601f168201915b5050505050905092915050565b60006005826040518082805190602001908083835b6020831015156113395780518252602082019150602081019050602083039250611314565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506001600581111561137b57fe5b8160060160009054906101000a900460ff16600581111561139857fe5b1415156113a457600080fd5b806002015481600301541015156113ba57600080fd5b600081600501805490509050600080905060008090505b8281101561151857600084600501838060010194508154811015156113f257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb828760040160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114b7929190612cb9565b602060405180830381600087803b1580156114d157600080fd5b505af11580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611509919081019061286d565b505080806001019150506113d1565b5060038360060160006101000a81548160ff0219169083600581111561153a57fe5b02179055507f7df70f52aad14ff64c7ace761306e9d698d2b1f43ba53f9cc1137a975b951c368460405161156e9190612ce2565b60405180910390a15050505050565b60006005826040518082805190602001908083835b6020831015156115b75780518252602082019150602081019050602083039250611592565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600901549050919050565b6005836040518082805190602001908083835b60208310151561162d5780518252602082019150602081019050602083039250611608565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166116a2612593565b73ffffffffffffffffffffffffffffffffffffffff161415156116c457600080fd5b806005846040518082805190602001908083835b6020831015156116fd57805182526020820191506020810190506020830392506116d8565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600a01836040518082805190602001908083835b6020831015156117695780518252602082019150602081019050602083039250611744565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000828254019250508190555060016005846040518082805190602001908083835b6020831015156117e357805182526020820191506020810190506020830392506117be565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600c0160008282540192505081905550806005846040518082805190602001908083835b60208310151561185f578051825260208201915060208101905060208303925061183a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b01600082825401925050819055506005836040518082805190602001908083835b6020831015156118da57805182526020820191506020810190506020830392506118b5565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600d0182908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061194b92919061259b565b5050505050565b6000806000806005866040518082805190602001908083835b602083101515611990578051825260208201915060208101905060208303925061196b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905080600a01856040518082805190602001908083835b6020831015156119ff57805182526020820191506020810190506020830392506119da565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205481600c015482600b0154935093509350509250925092565b60006005811115611a5857fe5b6005836040518082805190602001908083835b602083101515611a905780518252602082019150602081019050602083039250611a6b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060160009054906101000a900460ff166005811115611adf57fe5b141515611b21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1890612d6c565b60405180910390fd5b816005836040518082805190602001908083835b602083101515611b5a5780518252602082019150602081019050602083039250611b35565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000019080519060200190611ba392919061259b565b50611bac612593565b6005836040518082805190602001908083835b602083101515611be45780518252602082019150602081019050602083039250611bbf565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806005836040518082805190602001908083835b602083101515611c915780518252602082019150602081019050602083039250611c6c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018190555060006005836040518082805190602001908083835b602083101515611d055780518252602082019150602081019050602083039250611ce0565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206003018190555060006005836040518082805190602001908083835b602083101515611d795780518252602082019150602081019050602083039250611d54565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206004016000611db9612593565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016005836040518082805190602001908083835b602083101515611e315780518252602082019150602081019050602083039250611e0c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060160006101000a81548160ff02191690836005811115611e8257fe5b021790555060006005836040518082805190602001908083835b602083101515611ec15780518252602082019150602081019050602083039250611e9c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600b018190555060006005836040518082805190602001908083835b602083101515611f355780518252602082019150602081019050602083039250611f10565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600c01819055506001806000611f7c612593565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507f041828d7f84528c56a0f45c878fe07d22cabe6a744c0fe0a3d74d38a069bd044611fec612593565b8383604051611ffd93929190612c44565b60405180910390a15050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016120609190612c29565b60206040518083038186803b15801561207857600080fd5b505afa15801561208c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120b09190810190612ae9565b9050919050565b600080600080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205493509350935093509193509193565b60006005846040518082805190602001908083835b60208310151561220657805182526020820191506020810190506020830392506121e1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506060816005018054806020026020016040519081016040528092919081815260200182805480156122c157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612277575b50505050509050600081519050600085850290508773ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660646032850281151561232557fe5b046040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161235f929190612cb9565b602060405180830381600087803b15801561237957600080fd5b505af115801561238d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123b1919081019061286d565b5060006064603283028115156123c357fe5b04905060008090505b8381101561258757600085828151811015156123e457fe5b906020019060200201519050600087600301548860040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054850281151561244457fe5b0490508b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161249e929190612cb9565b602060405180830381600087803b1580156124b857600080fd5b505af11580156124cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506124f0919081019061286d565b506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055507fc1d32ad5cca423e7dda2123dbf8c482f8e77d00b631c06e903a47f2cec1334df8282604051612570929190612cb9565b60405180910390a1505080806001019150506123cc565b50505050505050505050565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106125dc57805160ff191683800117855561260a565b8280016001018555821561260a579182015b828111156126095782518255916020019190600101906125ee565b5b509050612617919061261b565b5090565b61263d91905b80821115612639576000816000905550600101612621565b5090565b90565b600061264c8235612f19565b905092915050565b60006126608251612f2b565b905092915050565b600082601f830112151561267b57600080fd5b813561268e61268982612e90565b612e63565b915080825260208301602083018583830111156126aa57600080fd5b6126b5838284612f89565b50505092915050565b60006126ca8235612f37565b905092915050565b60006126de8251612f37565b905092915050565b6000602082840312156126f857600080fd5b600061270684828501612640565b91505092915050565b6000806000806080858703121561272557600080fd5b600061273387828801612640565b945050602061274487828801612640565b935050604085013567ffffffffffffffff81111561276157600080fd5b61276d87828801612668565b925050606061277e878288016126be565b91505092959194509250565b6000806040838503121561279d57600080fd5b60006127ab85828601612640565b925050602083013567ffffffffffffffff8111156127c857600080fd5b6127d485828601612668565b9150509250929050565b600080600080600060a086880312156127f657600080fd5b600061280488828901612640565b955050602086013567ffffffffffffffff81111561282157600080fd5b61282d88828901612668565b945050604061283e88828901612640565b935050606061284f888289016126be565b9250506080612860888289016126be565b9150509295509295909350565b60006020828403121561287f57600080fd5b600061288d84828501612654565b91505092915050565b6000602082840312156128a857600080fd5b600082013567ffffffffffffffff8111156128c257600080fd5b6128ce84828501612668565b91505092915050565b600080604083850312156128ea57600080fd5b600083013567ffffffffffffffff81111561290457600080fd5b61291085828601612668565b925050602061292185828601612640565b9150509250929050565b6000806040838503121561293e57600080fd5b600083013567ffffffffffffffff81111561295857600080fd5b61296485828601612668565b925050602083013567ffffffffffffffff81111561298157600080fd5b61298d85828601612668565b9150509250929050565b6000806000606084860312156129ac57600080fd5b600084013567ffffffffffffffff8111156129c657600080fd5b6129d286828701612668565b935050602084013567ffffffffffffffff8111156129ef57600080fd5b6129fb86828701612668565b9250506040612a0c868287016126be565b9150509250925092565b60008060408385031215612a2957600080fd5b600083013567ffffffffffffffff811115612a4357600080fd5b612a4f85828601612668565b9250506020612a60858286016126be565b9150509250929050565b600080600060608486031215612a7f57600080fd5b600084013567ffffffffffffffff811115612a9957600080fd5b612aa586828701612668565b9350506020612ab6868287016126be565b925050604084013567ffffffffffffffff811115612ad357600080fd5b612adf86828701612668565b9150509250925092565b600060208284031215612afb57600080fd5b6000612b09848285016126d2565b91505092915050565b612b1b81612f41565b82525050565b612b2a81612ec7565b82525050565b612b3981612f53565b82525050565b6000612b4a82612ebc565b808452612b5e816020860160208601612f98565b612b6781612fcb565b602085010191505092915050565b6000600782527f69734578697374000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000601482527f706c65617365206d616b652063616d706169676e0000000000000000000000006020830152604082019050919050565b6000600f82527f796f75206172652063726561746f7200000000000000000000000000000000006020830152604082019050919050565b612c2381612f0f565b82525050565b6000602082019050612c3e6000830184612b21565b92915050565b6000606082019050612c596000830186612b12565b8181036020830152612c6b8185612b3f565b9050612c7a6040830184612c1a565b949350505050565b6000606082019050612c976000830186612b21565b612ca46020830185612b21565b612cb16040830184612c1a565b949350505050565b6000604082019050612cce6000830185612b21565b612cdb6020830184612c1a565b9392505050565b60006020820190508181036000830152612cfc8184612b3f565b905092915050565b600060c0820190508181036000830152612d1e8189612b3f565b9050612d2d6020830188612b21565b612d3a6040830187612c1a565b612d476060830186612c1a565b612d546080830185612c1a565b612d6160a0830184612b30565b979650505050505050565b60006020820190508181036000830152612d8581612b75565b9050919050565b60006020820190508181036000830152612da581612bac565b9050919050565b60006020820190508181036000830152612dc581612be3565b9050919050565b6000602082019050612de16000830184612c1a565b92915050565b6000606082019050612dfc6000830186612c1a565b612e096020830185612c1a565b612e166040830184612c1a565b949350505050565b6000608082019050612e336000830187612c1a565b612e406020830186612c1a565b612e4d6040830185612c1a565b612e5a6060830184612c1a565b95945050505050565b6000604051905081810181811067ffffffffffffffff82111715612e8657600080fd5b8060405250919050565b600067ffffffffffffffff821115612ea757600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b6000612ed282612eef565b9050919050565b6000600682101515612ee757fe5b819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f2482612eef565b9050919050565b60008115159050919050565b6000819050919050565b6000612f4c82612f65565b9050919050565b6000612f5e82612ed9565b9050919050565b6000612f7082612f77565b9050919050565b6000612f8282612eef565b9050919050565b82818337600083830152505050565b60005b83811015612fb6578082015181840152602081019050612f9b565b83811115612fc5576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058205801d7b31a53fb641e9fdc0399a4f5e621d4bd428f03c24278065ccf81e5b5526c6578706572696d656e74616cf50037";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_CREATECAMPAIGN = "createCampaign";

    public static final String FUNC_FUNDINGCAMPIGN = "FundingCampign";

    public static final String FUNC_RECEIVEFUNDS = "receiveFunds";

    public static final String FUNC_REFUND = "Refund";

    public static final String FUNC_CREATESALE = "createSale";

    public static final String FUNC_SALEITEM = "SaleItem";

    public static final String FUNC_GETINFO = "getInfo";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETCAMPAIGN = "getCampaign";

    public static final String FUNC_GETPEOPLENUM = "getPeopleNum";

    public static final String FUNC_USEFUND = "usefund";

    public static final String FUNC_GETUSED = "getUsed";

    public static final String FUNC_GETRECEIPTIMG = "getReceiptImg";

    public static final String FUNC_GETTOTALSELL = "getTotalSell";

    public static final Event CAMPAIGNCREATE_EVENT = new Event("CampaignCreate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDING_EVENT = new Event("Funding", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FUNDINGSUCCESS_EVENT = new Event("FundingSuccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event FUNDINGFAIL_EVENT = new Event("FundingFail", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event DISTRIBUTE_EVENT = new Event("Distribute", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CREATESALE_EVENT = new Event("CreateSale", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CrowdFunding(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CampaignCreateEventResponse> getCampaignCreateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, transactionReceipt);
        ArrayList<CampaignCreateEventResponse> responses = new ArrayList<CampaignCreateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CampaignCreateEventResponse>() {
            @Override
            public CampaignCreateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CAMPAIGNCREATE_EVENT, log);
                CampaignCreateEventResponse typedResponse = new CampaignCreateEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CampaignCreateEventResponse> campaignCreateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CAMPAIGNCREATE_EVENT));
        return campaignCreateEventFlowable(filter);
    }

    public List<FundingEventResponse> getFundingEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDING_EVENT, transactionReceipt);
        ArrayList<FundingEventResponse> responses = new ArrayList<FundingEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingEventResponse typedResponse = new FundingEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingEventResponse>() {
            @Override
            public FundingEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDING_EVENT, log);
                FundingEventResponse typedResponse = new FundingEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingEventResponse> fundingEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDING_EVENT));
        return fundingEventFlowable(filter);
    }

    public List<FundingSuccessEventResponse> getFundingSuccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, transactionReceipt);
        ArrayList<FundingSuccessEventResponse> responses = new ArrayList<FundingSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingSuccessEventResponse>() {
            @Override
            public FundingSuccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGSUCCESS_EVENT, log);
                FundingSuccessEventResponse typedResponse = new FundingSuccessEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingSuccessEventResponse> fundingSuccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGSUCCESS_EVENT));
        return fundingSuccessEventFlowable(filter);
    }

    public List<FundingFailEventResponse> getFundingFailEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FUNDINGFAIL_EVENT, transactionReceipt);
        ArrayList<FundingFailEventResponse> responses = new ArrayList<FundingFailEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FundingFailEventResponse typedResponse = new FundingFailEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, FundingFailEventResponse>() {
            @Override
            public FundingFailEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FUNDINGFAIL_EVENT, log);
                FundingFailEventResponse typedResponse = new FundingFailEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FundingFailEventResponse> fundingFailEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FUNDINGFAIL_EVENT));
        return fundingFailEventFlowable(filter);
    }

    public List<DistributeEventResponse> getDistributeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTE_EVENT, transactionReceipt);
        ArrayList<DistributeEventResponse> responses = new ArrayList<DistributeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DistributeEventResponse typedResponse = new DistributeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DistributeEventResponse>() {
            @Override
            public DistributeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DISTRIBUTE_EVENT, log);
                DistributeEventResponse typedResponse = new DistributeEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DistributeEventResponse> distributeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DISTRIBUTE_EVENT));
        return distributeEventFlowable(filter);
    }

    public List<CreateSaleEventResponse> getCreateSaleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATESALE_EVENT, transactionReceipt);
        ArrayList<CreateSaleEventResponse> responses = new ArrayList<CreateSaleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateSaleEventResponse typedResponse = new CreateSaleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreateSaleEventResponse> createSaleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CreateSaleEventResponse>() {
            @Override
            public CreateSaleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATESALE_EVENT, log);
                CreateSaleEventResponse typedResponse = new CreateSaleEventResponse();
                typedResponse.log = log;
                typedResponse.code = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreateSaleEventResponse> createSaleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATESALE_EVENT));
        return createSaleEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> createCampaign(String _uniqueCode, BigInteger _fundingGoal) {
        final Function function = new Function(
                FUNC_CREATECAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingGoal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> FundingCampign(String _tokenAddress, String _from, String _uniqueCode, BigInteger _fundingValue) {
        final Function function = new Function(
                FUNC_FUNDINGCAMPIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_fundingValue)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receiveFunds(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_RECEIVEFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> Refund(String _tokenAddress, String _uniqueCode) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSale(String _uniqueCode, BigInteger _money, String _image) {
        final Function function = new Function(
                FUNC_CREATESALE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(_money), 
                new org.web3j.abi.datatypes.Utf8String(_image)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> SaleItem(String _tokenAddress, String _uniqueCode, String buyer, BigInteger _count, BigInteger _money) {
        final Function function = new Function(
                FUNC_SALEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress), 
                new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Address(buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(_count), 
                new org.web3j.abi.datatypes.generated.Uint256(_money)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getInfo(String target) {
        final Function function = new Function(FUNC_GETINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getBalance(String _tokenAddress) {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_tokenAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>> getCampaign(String _uniqueCode, String target) {
        final Function function = new Function(FUNC_GETCAMPAIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Address(target)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getPeopleNum(String _uniqueCode) {
        final Function function = new Function(FUNC_GETPEOPLENUM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> usefund(String _uniqueCode, String _imgName, BigInteger pay) {
        final Function function = new Function(
                FUNC_USEFUND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName), 
                new org.web3j.abi.datatypes.generated.Uint256(pay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUsed(String _uniqueCode, String _imgName) {
        final Function function = new Function(FUNC_GETUSED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.Utf8String(_imgName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> getReceiptImg(String _uniqueCode, BigInteger idx) {
        final Function function = new Function(FUNC_GETRECEIPTIMG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode), 
                new org.web3j.abi.datatypes.generated.Uint256(idx)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getTotalSell(String _uniqueCode) {
        final Function function = new Function(FUNC_GETTOTALSELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_uniqueCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CrowdFunding load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CrowdFunding(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<CrowdFunding> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(CrowdFunding.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class CampaignCreateEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingEventResponse extends BaseEventResponse {
        public String from;

        public String code;

        public BigInteger amount;
    }

    public static class FundingSuccessEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class FundingFailEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class DistributeEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger amount;
    }

    public static class CreateSaleEventResponse extends BaseEventResponse {
        public String code;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
